# -*- coding: utf-8 -*-
"""Vision_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17wbnBQbEHwvi0GCSPulpciXyJ8JXixcf
"""

# !pip install flask opencv-python pillow torch torchvision ultralytics flask-cors

import os
import cv2
import torch
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
from werkzeug.utils import secure_filename
from ultralytics import YOLO

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for frontend integration

# Define upload and result folders
UPLOAD_FOLDER = "static/uploads"
RESULT_FOLDER = "static/results"
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg"}

app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
app.config["RESULT_FOLDER"] = RESULT_FOLDER

# Ensure directories exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

# Load the YOLOv8 model (Replace with your custom-trained model if available)
model = YOLO("yolov8n.pt")  # Use "your_custom_model.pt" if trained on a dataset

# Function to check allowed file types
def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

# Function to process the image and perform detection
def process_image(image_path):
    img = Image.open(image_path)

    # Perform model inference
    results = model(img)

    # Load image using OpenCV for bounding box drawing
    img_cv = cv2.imread(image_path)
    for result in results:
        for box, cls in zip(result.boxes.xyxy, result.boxes.cls):
            x1, y1, x2, y2 = map(int, box)  # Extract bounding box coordinates
            label = result.names[int(cls.item())]  # Get class label

            # Draw bounding box and label on the image
            cv2.rectangle(img_cv, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img_cv, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Save the processed image with detections
    result_filename = os.path.basename(image_path)
    result_path = os.path.join(app.config["RESULT_FOLDER"], result_filename)
    cv2.imwrite(result_path, img_cv)

    return result_path, results.pandas().xyxy[0].to_dict(orient="records")  # Return results as JSON

# Route for uploading and processing the image
@app.route("/upload", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["file"]

    if file.filename == "" or not allowed_file(file.filename):
        return jsonify({"error": "Invalid file type"}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
    file.save(filepath)

    # Process image and get results
    result_path, detections = process_image(filepath)

    return jsonify({
        "image_url": result_path,
        "detections": detections
    })

# Run Flask app
if __name__ == "__main__":
    app.run(debug=True)